mysqldump: [Warning] Using a password on the command line interface can be insecure.
-- MySQL dump 10.13  Distrib 8.0.42, for Linux (aarch64)
--
-- Host: localhost    Database: aws_costs
-- ------------------------------------------------------
-- Server version	8.0.42

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
mysqldump: Error: 'Access denied; you need (at least one of) the PROCESS privilege(s) for this operation' when trying to dump tablespaces

--
-- Table structure for table `ai_agent_configs`
--

DROP TABLE IF EXISTS `ai_agent_configs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ai_agent_configs` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `description` text,
  `provider` varchar(20) NOT NULL DEFAULT 'openai',
  `openai_api_key_encrypted` text,
  `anthropic_api_key_encrypted` text,
  `model` varchar(50) NOT NULL DEFAULT 'gpt-4',
  `prompt_template` text NOT NULL,
  `temperature` float DEFAULT '0.7',
  `max_tokens` int DEFAULT '1000',
  `is_active` tinyint(1) DEFAULT '1',
  `is_default` tinyint(1) DEFAULT '0',
  `created_by` int NOT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `idx_name` (`name`),
  KEY `idx_is_active` (`is_active`),
  KEY `idx_is_default` (`is_default`),
  KEY `idx_created_by` (`created_by`),
  CONSTRAINT `ai_agent_configs_ibfk_1` FOREIGN KEY (`created_by`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ai_agent_configs`
--

LOCK TABLES `ai_agent_configs` WRITE;
/*!40000 ALTER TABLE `ai_agent_configs` DISABLE KEYS */;
INSERT INTO `ai_agent_configs` VALUES (1,'Leo ','','openai','gAAAAABocXTwHR1eHHOxyxKEOzdlZxYo11ZagWtAo1FlzmJ9W-1l_8eLaQgsUr8T-9FoNZuDgWL4-mDUUIrOyIIXAlQD7AcstteHWUiq99kmkf0eo1775f5580_zrkLgsw-4EvMHLTjOyS19osKloelFnhM33BkZxImzMgdWb1H0AnyjphZdzdt7rNvCCbM-61gPw6snIpNlPm0Al2ScAnzh2UG3EFimi_xefl18gr-zGXZxSmh4dsygGLShb7_9uiM_6gKCwekHKrxIbo0a_-wJY2zXmOwv6pBq9nXcKOvkrjRInIYb6zQ=',NULL,'gpt-4','You are an AWS cost optimization expert. Analyze the following AWS resources and provide specific recommendations to reduce costs while maintaining performance and reliability.\n\nFocus on these key areas:\n1. **Rightsizing**: Identify over-provisioned instances that can be downsized\n2. **Reserved Instances**: Recommend Reserved Instance purchases for consistent workloads\n3. **Unused Resources**: Find idle or underutilized resources that can be terminated\n4. **Storage Optimization**: Suggest more cost-effective storage classes and cleanup\n5. **Network Costs**: Identify expensive data transfer patterns and optimization opportunities\n6. **Scheduling**: Recommend start/stop schedules for non-production resources\n\nFor each recommendation, provide:\n- **Resource**: Specific AWS resource affected\n- **Current Cost**: Estimated current monthly cost\n- **Recommendation**: Specific action to take\n- **Estimated Savings**: Expected monthly savings\n- **Implementation**: How to implement the change\n- **Risk Level**: Low/Medium/High impact on operations\n\nAWS Resource Data: {resource_data}\n\nProvide actionable, prioritized recommendations with clear cost savings estimates.',0.7,1000,1,1,1,'2025-07-11 20:32:48','2025-07-11 20:32:53'),(2,'Leo Anthropic','Testing Anthropic AI','anthropic',NULL,'gAAAAABodDAHfwlFbCjU87Z8Z-IghEVG3SyvvH-BoqKQMmKpgzyUqPq7rUfSyzs_jwS872Q-2B1JiFbWquU5OslPFHIUAdq6azdZCoFKFZZ2A9iCeM8Fah0KXklGPuujpHkaQ1-Jeq7uqbfEx19A8d0vpeBoChr5SUqjkzXpbq3PM9l2wsbAMs8m3ubbfBW01a6PNdITECQDW35l_mtNHSWi_HCwQeMkZg==','claude-3-5-sonnet-20241022','You are an AWS cost optimization expert. Analyze the following AWS resources and provide specific recommendations to reduce costs while maintaining performance and reliability.\n\nFocus on these key areas:\n1. **Rightsizing**: Identify over-provisioned instances that can be downsized\n2. **Reserved Instances**: Recommend Reserved Instance purchases for consistent workloads\n3. **Unused Resources**: Find idle or underutilized resources that can be terminated\n4. **Storage Optimization**: Suggest more cost-effective storage classes and cleanup\n5. **Network Costs**: Identify expensive data transfer patterns and optimization opportunities\n6. **Scheduling**: Recommend start/stop schedules for non-production resources\n\nFor each recommendation, provide:\n- **Resource**: Specific AWS resource affected\n- **Current Cost**: Estimated current monthly cost\n- **Recommendation**: Specific action to take\n- **Estimated Savings**: Expected monthly savings\n- **Implementation**: How to implement the change\n- **Risk Level**: Low/Medium/High impact on operations\n\nAWS Resource Data: {resource_data}\n\nProvide actionable, prioritized recommendations with clear cost savings estimates.',0.7,1000,1,0,1,'2025-07-13 22:15:35','2025-07-13 22:15:35');
/*!40000 ALTER TABLE `ai_agent_configs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ai_reports`
--

DROP TABLE IF EXISTS `ai_reports`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ai_reports` (
  `id` int NOT NULL AUTO_INCREMENT,
  `aws_account_id` int NOT NULL,
  `ai_agent_id` int NOT NULL,
  `owner_id` int NOT NULL,
  `analysis_period_start` date NOT NULL,
  `analysis_period_end` date NOT NULL,
  `recommendations` text NOT NULL,
  `estimated_savings` decimal(15,2) DEFAULT '0.00',
  `confidence_score` decimal(3,2) DEFAULT '0.00',
  `tokens_used` int DEFAULT '0',
  `total_cost_analyzed` decimal(15,2) DEFAULT '0.00',
  `services_analyzed` int DEFAULT '0',
  `rightsizing_opportunities` int DEFAULT '0',
  `report_status` enum('completed','failed','processing') DEFAULT 'completed',
  `generation_time_seconds` decimal(5,2) DEFAULT '0.00',
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `idx_aws_account_id` (`aws_account_id`),
  KEY `idx_owner_id` (`owner_id`),
  KEY `idx_ai_agent_id` (`ai_agent_id`),
  KEY `idx_created_at` (`created_at`),
  KEY `idx_analysis_period` (`analysis_period_start`,`analysis_period_end`),
  KEY `idx_estimated_savings` (`estimated_savings`),
  KEY `idx_account_owner` (`aws_account_id`,`owner_id`),
  KEY `idx_account_date` (`aws_account_id`,`created_at`),
  CONSTRAINT `ai_reports_ibfk_1` FOREIGN KEY (`aws_account_id`) REFERENCES `aws_accounts` (`id`) ON DELETE CASCADE,
  CONSTRAINT `ai_reports_ibfk_2` FOREIGN KEY (`ai_agent_id`) REFERENCES `ai_agent_configs` (`id`) ON DELETE RESTRICT,
  CONSTRAINT `ai_reports_ibfk_3` FOREIGN KEY (`owner_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ai_reports`
--

LOCK TABLES `ai_reports` WRITE;
/*!40000 ALTER TABLE `ai_reports` DISABLE KEYS */;
INSERT INTO `ai_reports` VALUES (2,6,1,1,'2025-06-13','2025-07-13','**Recommendation 1: Reserved Instances**\n- Resource: Amazon Elastic Compute Cloud - Compute\n- Current Cost: $44.97 (58% of total cost)\n- Recommendation: Purchase Reserved Instances for consistent EC2 workloads\n- Estimated Savings: Up to 75% over On-Demand instances\n- Implementation: Verify the consistency of EC2 workloads. Then, purchase Reserved Instances in the AWS Management Console.\n- Risk Level: Medium (Requires predicting future usage)\n\n**Recommendation 2: Unused Resources**\n- Resource: AWS Config\n- Current Cost: $8.89 (11.5% of total cost)\n- Recommendation: Identify and terminate idle Config Rules\n- Estimated Savings: Depends on the number of unused Config Rules, potentially up to 100% of the AWS Config cost\n- Implementation: Use AWS Config to identify unused Config Rules. Then, delete them in the AWS Management Console.\n- Risk Level: Low (No impact if rules are not being used)\n\n**Recommendation 3: Storage Optimization**\n- Resource: Amazon Virtual Private Cloud\n- Current Cost: $11.45 (14.8% of total cost)\n- Recommendation: Move infrequently accessed data to cheaper storage classes\n- Estimated Savings: Up to 60% depending on data usage patterns\n- Implementation: Identify infrequently accessed data and move it to a cheaper storage class in the AWS Management Console.\n- Risk Level: Low (No impact if data is infrequently accessed)\n\n**Recommendation 4: Scheduling**\n- Resource: Amazon Elastic Compute Cloud - Compute\n- Current Cost: $44.97 (58% of total cost)\n- Recommendation: Implement start/stop schedules for non-production EC2 instances\n- Estimated Savings: Depends on off hours, potentially up to 70% of non-production EC2 cost\n- Implementation: Use AWS Instance Scheduler to schedule start and stop times for non-production instances.\n- Risk Level: Medium (Requires careful configuration to avoid impacting workloads)\n\n**Recommendation 5: Network Costs**\n- Resource: Amazon Route 53\n- Current Cost: $2.00 (2.6% of total cost)\n- Recommendation: Optimize DNS queries to reduce costs\n- Estimated Savings: Depends on the number of queries, potentially up to 50% of Route 53 cost\n- Implementation: Review DNS query patterns and make optimizations as necessary.\n- Risk Level: High (Can impact application performance if not done correctly)\n\n**Note:** The given data does not include specific details about individual resources or their usage. The estimated savings are approximations based on general practices and could vary based on the actual usage pattern. It\'s recommended to conduct a thorough review of resource utilization and cost patterns before implementing these changes.',11.64,0.80,2054,77.57,19,0,'completed',20.31,'2025-07-13 21:25:28'),(3,5,1,1,'2025-06-13','2025-07-13','Based on the provided data, the following recommendations can be made:\n\n**1. Reserved Instances**\n- **Resource**: Amazon Elastic Compute Cloud - Compute\n- **Current Cost**: $232.704\n- **Recommendation**: Purchase Reserved Instances for consistent workloads. The cost of compute resources can be significantly reduced by purchasing Reserved Instances for the EC2 instances that run continuously.\n- **Estimated Savings**: Depending on the term and payment option chosen, Reserved Instances can provide a discount of up to 75% compared to On-Demand instance pricing. An average of 40% savings could be reasonable, which is around $93.08 per month.\n- **Implementation**: Log into AWS Management Console, navigate to EC2 Dashboard, choose \"Reserved Instances\" from the left-hand menu, and click \"Purchase Reserved Instances\".\n- **Risk Level**: Low\n\n**2. Storage Optimization**\n- **Resource**: Amazon Simple Storage Service\n- **Current Cost**: $308.5554483742\n- **Recommendation**: Move infrequently accessed data to a more cost-effective storage class such as S3 Intelligent-Tiering, S3 Standard-IA, or S3 One Zone-IA.\n- **Estimated Savings**: Savings can vary greatly depending on the storage class and the amount of data. On average, you could see savings up to 40%, which would be around $123.42 per month.\n- **Implementation**: Use S3 Lifecycle policies to automate the transition of objects between storage classes.\n- **Risk Level**: Low\n\n**3. Unused Resources**\n- **Resource**: AWS Database Migration Service\n- **Current Cost**: $126.72\n- **Recommendation**: Check if the Database Migration Service is still in use; if not, terminate to avoid unnecessary costs.\n- **Estimated Savings**: If the service is not in use, the entire cost could be saved, which is $126.72 per month.\n- **Implementation**: Log into AWS Management Console, navigate to the DMS Dashboard, select your replication instances, and choose \"Delete\".\n- **Risk Level**: High (Only if the service is still in use)\n\n**4. Network Cost Optimization**\n- **Resource**: Amazon CloudFront, Amazon Virtual Private Cloud\n- **Current Cost**: $72.004231945 (VPC) + $27.9417818025 (CloudFront) = $99.9460137475\n- **Recommendation**: Review data transfer patterns and optimize. Consider using CloudFront for content delivery to reduce data transfer costs.\n- **Estimated Savings**: Savings can vary based on usage patterns, but a reduction of 10% is reasonable, which is around $9.99 per month.\n- **Implementation**: Log into AWS Management Console, navigate to CloudFront, create a distribution for your web content, configure caching to minimize data transfers.\n- **Risk Level**: Medium\n\nPlease note that the potential savings are rough estimates and actual savings can vary. Always consider the performance and operational needs of your applications before making changes to your AWS resources.',205.47,0.80,2102,1369.79,18,0,'completed',17.14,'2025-07-13 21:26:29'),(4,4,1,1,'2025-06-13','2025-07-13','Based on the provided data, here are some specific, actionable recommendations:\n\n**Recommendation 1: Reserved Instances for EC2 and RDS**\n\n- **Resource:** Amazon Elastic Compute Cloud - Compute & Amazon Relational Database Service\n- **Current Cost:** $284.68 for EC2 and $210.96 for RDS\n- **Recommendation:** Purchase Reserved Instances for consistent workloads on EC2 and RDS, which can save up to 75% compared to On-Demand pricing.\n- **Estimated Savings:** Assuming 40% savings, EC2 could save $113.87 and RDS could save $84.38 per month.\n- **Implementation:** Evaluate your workloads, identify instances with consistent usage, and purchase Reserved Instances via AWS Management Console.\n- **Risk Level:** Low\n\n**Recommendation 2: Optimize Data Transfer in VPC**\n\n- **Resource:** Amazon Virtual Private Cloud\n- **Current Cost:** $281.75\n- **Recommendation:** Minimize data transfer costs by keeping traffic within the same region or VPC, and consider using VPC Endpoints for communicating with AWS services.\n- **Estimated Savings:** Difficult to predict without knowing data transfer patterns, but possible 20% savings of $56.35 per month.\n- **Implementation:** Review VPC flow logs to understand data transfer patterns and optimize accordingly.\n- **Risk Level:** Medium\n\n**Recommendation 3: Reduce or Optimize Use of Elastic Load Balancing**\n\n- **Resource:** Amazon Elastic Load Balancing\n- **Current Cost:** $183.93\n- **Recommendation:** Evaluate your load balancer usage, consider downscaling or consolidating Elastic Load Balancers if possible.\n- **Estimated Savings:** Assuming a 10% reduction yields savings of $18.39 per month.\n- **Implementation:** Review your application traffic patterns and adjust load balancers accordingly.\n- **Risk Level:** Medium\n\n**Recommendation 4: Evaluate Use of SageMaker and ElastiCache**\n\n- **Resource:** Amazon SageMaker & Amazon ElastiCache\n- **Current Cost:** $202.53 for SageMaker and $97.92 for ElastiCache\n- **Recommendation:** If these services are not fully utilized, consider downscaling or even eliminating them.\n- **Estimated Savings:** Difficult to predict without usage data, but a 10% reduction could save $20.25 on SageMaker and $9.79 on ElastiCache per month.\n- **Implementation:** Review usage metrics for these services and adjust resources accordingly.\n- **Risk Level:** Medium',252.23,0.80,2027,1681.52,36,0,'completed',19.39,'2025-07-13 21:28:09'),(5,6,2,1,'2025-06-13','2025-07-13','Based on the provided AWS cost data for the DevSecOps Staging account, here are specific, actionable recommendations for cost optimization:\n\n1. **EC2 Instance Optimization**\n- **Resource**: EC2 Compute ($44.97/month, 58% of costs)\n- **Current Cost**: $44.97/month\n- **Recommendation**: Implement automated start/stop schedules for staging environment during non-business hours (nights/weekends)\n- **Estimated Savings**: $22.48/month (50% reduction assuming 12 hours/day, 5 days/week runtime)\n- **Implementation**: Use AWS Instance Scheduler or AWS Lambda with EventBridge rules\n- **Risk Level**: Low (staging environment)\n\n2. **VPC Cost Reduction**\n- **Resource**: Amazon VPC ($11.45/month, 14.8% of costs)\n- **Current Cost**: $11.45/month\n- **Recommendation**: Review and optimize NAT Gateway usage, consider using VPC endpoints for AWS services\n- **Estimated Savings**: $3-4/month\n- **Implementation**: Replace NAT Gateways with VPC endpoints for AWS services where possible\n- **Risk Level**: Medium\n\n3. **AWS Config Optimization**\n- **Resource**: AWS Config ($8.89/month, 11.5% of costs)\n- **Current Cost**: $8.89/month\n- **Recommendation**: Review recording frequency and retention period, remove unnecessary rules\n- **Estimated Savings**: $2-3/month\n- **Implementation**: \n  - Reduce recording frequency to 24 hours\n  - Decrease retention period if longer than required\n  - Remove redundant rules\n- **Risk Level**: Low\n\n4. **Cost Pattern Analysis**\nNotable cost spikes occurred on:\n- June 17-18 ($4.05-$5.01)\n- July 11-12 ($3.97-$4.53)\nRecommend investigating these spikes and implementing controls to prevent unexpected usage increases.\n\n5. **RDS Optimization**\n- **Resource**: Amazon RDS ($0.64/month)\n- **Current Cost**: $0.64/month\n- **Recommendation**: Consider stopping RDS instances during non-business hours in staging\n- **Estimated Savings**: $0.32/month\n- **Implementation**: Use AWS Instance Scheduler or automated start/stop scripts\n- **Risk Level**: Low\n\n6. **Load Balancer Review**\n- **Resource**: Elastic Load Balancing ($0.56/month)\n- **Current Cost**: $0.56/month\n- **Recommendation**: Review if load balancer is necessary for staging environment\n- **Estimated Savings**: $0.56/month if removed\n- **Implementation**: Migrate to direct instance access if possible\n- **Risk Level**: Medium\n\nPriority Implementation Order:\n1. EC2 scheduling (highest potential savings)\n2. VPC optimization\n3. AWS Config optimization\n4. RDS scheduling\n5. Load balancer review\n\nAdditional Recommendations:\n1. Enable AWS Cost Anomaly Detection to catch unexpected spikes\n2. Set up AWS Budgets alerts at 80% and 100% of expected monthly spend\n3. Tag all resources properly for better cost allocation and tracking\n4. Regular cleanup of unused EBS volumes and snapshots\n\nTotal Potential Monthly Savings: $28-30 (approximately 36-39% reduction)\n\nNote: The cost data shows this is a relatively small environment ($2-5/day), so while percentage savings can be significant, absolute dollar amounts are modest. Focus on automation and governance to prevent cost growth as the environment scales.',11.64,0.80,2499,77.57,19,0,'completed',15.76,'2025-07-13 22:16:13'),(6,5,2,1,'2025-06-13','2025-07-13','Based on the provided AWS cost data, here are specific recommendations prioritized by potential impact and savings:\n\n1. **RDS Optimization (Highest Priority)**\n- **Resource**: Amazon RDS ($361.59/month, 26.4% of total cost)\n- **Current Cost**: $361.59/month\n- **Recommendation**: \n  1. Convert to Reserved Instances for consistent workloads\n  2. Evaluate instance sizes based on CloudWatch metrics\n- **Estimated Savings**: $108-144/month (30-40% with RIs)\n- **Implementation**: \n  - Purchase 1-year RI with partial upfront payment\n  - Use AWS Cost Explorer\'s RI recommendations\n- **Risk Level**: Low\n\n2. **S3 Storage Optimization**\n- **Resource**: S3 ($308.56/month, 22.5% of total cost)\n- **Current Cost**: $308.56/month\n- **Recommendation**: \n  1. Implement lifecycle policies to move infrequently accessed data to cheaper storage tiers\n  2. Clean up unused/redundant data\n- **Estimated Savings**: $61-92/month (20-30%)\n- **Implementation**: \n  - Use S3 Analytics to identify transition candidates\n  - Create lifecycle rules for objects >30 days old\n- **Risk Level**: Low\n\n3. **EC2 Instance Optimization**\n- **Resource**: EC2 Compute ($232.70/month, 17%)\n- **Current Cost**: $232.70/month\n- **Recommendation**: \n  1. Purchase Reserved Instances for steady-state workloads\n  2. Implement auto-scaling based on utilization\n- **Estimated Savings**: $69-93/month (30-40% with RIs)\n- **Implementation**: \n  - Review CloudWatch metrics for utilization patterns\n  - Purchase RIs for instances with >40% utilization\n- **Risk Level**: Medium\n\n4. **DMS Usage Review**\n- **Resource**: AWS Database Migration Service ($126.72/month, 9.3%)\n- **Current Cost**: $126.72/month\n- **Recommendation**: Evaluate if ongoing replication is necessary\n- **Estimated Savings**: Up to $126.72/month (100% if no longer needed)\n- **Implementation**: \n  - Review active migration tasks\n  - Terminate unnecessary replication instances\n- **Risk Level**: Medium\n\n5. **ElastiCache Optimization**\n- **Resource**: Amazon ElastiCache ($90/month, 6.6%)\n- **Current Cost**: $90/month\n- **Recommendation**: \n  1. Right-size cache instances\n  2. Consider Reserved Nodes\n- **Estimated Savings**: $27-36/month (30-40%)\n- **Implementation**: \n  - Monitor cache hit rates and memory usage\n  - Purchase Reserved Nodes for stable workloads\n- **Risk Level**: Low\n\n6. **Network Cost Optimization**\n- **Resource**: VPC + CloudFront ($99.95/month combined)\n- **Current Cost**: $99.95/month\n- **Recommendation**: \n  1. Review data transfer patterns\n  2. Optimize CloudFront configuration\n- **Estimated Savings**: $15-20/month (15-20%)\n- **Implementation**: \n  - Use VPC endpoints where applicable\n  - Optimize CloudFront cache hit ratio\n- **Risk Level**: Low\n\nAdditional Observations:\n1. Daily costs show stability except for July 1st spike ($75.54)\n2. No rightsizing opportunities reported, suggesting instances may be properly sized\n3. Developer Support plan ($29/month) could be evaluated based on usage\n\nTotal Potential Monthly Savings: $280-511 (20-37% of total costs)\n\nPriority Implementation Order:\n1. RDS Reserved Instances (highest savings, lowest risk)\n2. S3 Storage Optimization (significant savings, low risk)\n3. EC2 Reserved Instances (good savings, manageable risk)\n4. DMS Review (potential high savings, requires analysis)\n5. ElastiCache Optimization (moderate savings, low risk)\n6. Network Optimizations (smaller savings, low risk)\n\nWould you like me to elaborate on any of these recommendations or provide more specific implementation details for any area?',205.47,0.80,2659,1369.79,18,0,'completed',16.45,'2025-07-13 22:18:03'),(7,4,2,1,'2025-06-16','2025-07-16','Based on the provided AWS cost data, here are specific, actionable recommendations for cost optimization:\n\n1. **EC2 & VPC Cost Optimization**\n\nResource: Amazon EC2 & VPC (Combined 33.6% of costs, ~$566/month)\nCurrent Cost: $284.62 (EC2) + $281.68 (VPC)\nRecommendations:\n- Implement EC2 Auto Scaling with scheduled scaling for non-production environments\n- Review and consolidate NAT Gateways\n- Consider VPC Endpoint usage to reduce NAT Gateway costs\nEstimated Savings: $85-115/month (15-20%)\nImplementation: \n- Set up Auto Scaling groups with scheduled actions\n- Audit and consolidate NAT Gateways across AZs\nRisk Level: Low\n\n2. **RDS Optimization**\n\nResource: Amazon RDS (12.8% of costs, ~$215.91/month)\nRecommendation: Convert eligible RDS instances to Reserved Instances (1-year term)\nEstimated Savings: $64-86/month (30-40%)\nImplementation:\n- Analyze RDS usage patterns\n- Purchase RIs for instances with consistent usage\nRisk Level: Low\n\n3. **SageMaker Cost Reduction**\n\nResource: Amazon SageMaker (12% of costs, ~$202.51/month)\nRecommendations:\n- Implement notebook instance lifecycle configurations to stop idle instances\n- Use managed spot training where possible\nEstimated Savings: $40-60/month (20-30%)\nImplementation:\n- Configure auto-shutdown for notebook instances after 2 hours of inactivity\n- Convert training jobs to use spot instances\nRisk Level: Medium\n\n4. **Load Balancer Optimization**\n\nResource: Elastic Load Balancing (10.9% of costs, ~$183.93/month)\nRecommendations:\n- Review and remove unused load balancers\n- Switch from Application Load Balancers to Network Load Balancers where appropriate\nEstimated Savings: $27-36/month (15-20%)\nImplementation:\n- Audit load balancer usage and remove unused ones\n- Analyze traffic patterns to identify candidates for NLB\nRisk Level: Medium\n\n5. **ElastiCache Optimization**\n\nResource: Amazon ElastiCache (5.8% of costs, ~$97.92/month)\nRecommendations:\n- Right-size cache instances based on CloudWatch metrics\n- Consider Reserved Instances for consistent workloads\nEstimated Savings: $19-29/month (20-30%)\nImplementation:\n- Review CloudWatch metrics for memory usage\n- Purchase RIs for stable cache instances\nRisk Level: Low\n\n6. **CloudWatch Optimization**\n\nResource: CloudWatch (3.4% of costs, ~$57.72/month)\nRecommendations:\n- Review and adjust metric retention periods\n- Optimize logging levels and sampling rates\nEstimated Savings: $11-17/month (20-30%)\nImplementation:\n- Audit CloudWatch metrics and logs\n- Implement log sampling where appropriate\nRisk Level: Low\n\nAdditional Observations:\n1. There\'s a significant cost spike on 2025-07-01 ($161.20 vs. average $52-53/day)\n2. Daily costs are relatively stable otherwise\n3. AWS Support Business tier (5.9% of costs) could be reviewed if current support needs don\'t justify the expense\n\nPriority Implementation Order:\n1. EC2 & VPC optimizations (highest absolute savings)\n2. RDS Reserved Instances (good savings with low risk)\n3. SageMaker optimizations\n4. Load Balancer cleanup\n5. ElastiCache optimizations\n6. CloudWatch optimizations\n\nTotal Potential Monthly Savings: $246-343 (15-20% of total costs)\n\nFor best results:\n1. Implement changes gradually\n2. Monitor performance metrics during changes\n3. Document baseline performance before making changes\n4. Use AWS Cost Explorer and AWS Budgets to track savings\n5. Regular review of implemented optimizations (quarterly)',252.98,0.80,2616,1686.56,36,0,'completed',19.95,'2025-07-16 20:07:56'),(8,7,2,1,'2025-06-25','2025-07-25','AI analysis failed: Connection error.',0.00,0.00,0,0.00,0,0,'failed',4.68,'2025-07-25 17:06:36'),(9,7,2,1,'2025-06-25','2025-07-25','AI analysis failed: Connection error.',0.00,0.00,0,0.00,0,0,'failed',4.28,'2025-07-25 17:06:49'),(10,7,1,1,'2025-06-25','2025-07-25','Based on the provided data, here are my recommendations for AWS cost optimization:\n\n1. **Reserved Instances**:\n   - **Resource**: Amazon Elastic Compute Cloud - Compute\n   - **Current Cost**: $79.142 per month\n   - **Recommendation**: Purchase Reserved Instances for EC2. Since EC2 instances contribute to a significant portion of your AWS cost, purchasing Reserved Instances can provide significant savings. \n   - **Estimated Savings**: Up to 75% over On-Demand instances\n   - **Implementation**: Evaluate your workloads to identify consistent usage patterns. Purchase Reserved Instances for these stable workloads.\n   - **Risk Level**: Low. This change will not affect your operations if your workloads are stable.\n   \n2. **Unused Resources**:\n   - **Resource**: Amazon Elastic Load Balancing\n   - **Current Cost**: $32.065 per month\n   - **Recommendation**: Review your Elastic Load Balancer usage. If there are any unused or underutilized load balancers, consider deleting them.\n   - **Estimated Savings**: Depends on the number of underutilized load balancers.\n   - **Implementation**: Use AWS Trusted Advisor to identify unused or underutilized load balancers.\n   - **Risk Level**: Medium. Ensure that the load balancer is not being used before deleting it.\n\n3. **Storage Optimization**:\n   - **Resource**: Amazon EC2 Container Registry (ECR)\n   - **Current Cost**: $8.084 per month\n   - **Recommendation**: Regularly clean up old, unused Docker images in ECR.\n   - **Estimated Savings**: Depends on the number and size of unused Docker images.\n   - **Implementation**: Use lifecycle policies in ECR to automatically clean up old images.\n   - **Risk Level**: Low. This will not affect your operations as long as you are not deleting currently used Docker images.\n\n4. **Network Costs**:\n   - **Resource**: Amazon Virtual Private Cloud\n   - **Current Cost**: $39.386 per month\n   - **Recommendation**: Optimize data transfer costs. If there is a lot of cross-region or Internet data transfer, consider using AWS Direct Connect or reduce cross-region traffic.\n   - **Estimated Savings**: Up to 50% depending on the current data transfer volume and patterns.\n   - **Implementation**: Use VPC Flow Logs to identify high data transfer patterns and take appropriate measures.\n   - **Risk Level**: Medium. Changes to network configurations can impact operations.\n\nPlease note that actual savings may vary and continuous cost optimization efforts may be required to keep AWS costs under control.',45.57,0.80,2036,303.77,18,0,'completed',33.62,'2025-07-25 17:07:25'),(11,4,1,1,'2025-06-28','2025-07-28','Based on the provided data, here are the top recommendations for cost optimization:\n\n**Recommendation 1: Review Training Credit Program and Learning Solution Package**\n\n- **Resource**: New Horizons Training Credit Program and New Horizons Custom Blended AWS Learning Solution Package\n- **Current Cost**: $2945.0 (63.5% of total cost)\n- **Recommendation**: Review usage and necessity of these programs. If not fully utilized or necessary, consider reducing the commitment.\n- **Estimated Savings**: Depends on reduction, potentially up to $2945.0\n- **Implementation**: Review usage reports from New Horizons, and adjust subscriptions as necessary.\n- **Risk Level**: Low. This is unlikely to affect operations unless the training is necessary for operational efficiency.\n\n**Recommendation 2: Reserved Instances for EC2 and RDS**\n\n- **Resource**: Amazon Elastic Compute Cloud - Compute and Amazon Relational Database Service\n- **Current Cost**: $505.54 (10.9% of total cost)\n- **Recommendation**: If these services have consistent workloads, consider purchasing Reserved Instances to lower costs.\n- **Estimated Savings**: Up to 75% with Reserved Instances, depending on the commitment term.\n- **Implementation**: From the EC2 or RDS dashboard, purchase Reserved Instances for the instance types in use.\n- **Risk Level**: Low. This will not affect operational capacity.\n\n**Recommendation 3: Review and Optimize Data Transfer Costs**\n\n- **Resource**: Amazon Virtual Private Cloud\n- **Current Cost**: $281.70 (6.1% of total cost)\n- **Recommendation**: Investigate data transfer patterns within the VPC. Consider optimizing by reducing inter-AZ data transfer, using VPC Endpoints for AWS service access, and minimizing Internet data transfer.\n- **Estimated Savings**: Variable, depending on the amount of unnecessary data transfer.\n- **Implementation**: From the VPC dashboard, investigate data transfer patterns and implement changes.\n- **Risk Level**: Medium. Changes to network architecture can impact operations if not done correctly.\n\n**Recommendation 4: Review Use of Load Balancing and SageMaker**\n\n- **Resource**: Amazon Elastic Load Balancing and Amazon SageMaker\n- **Current Cost**: $386.38 (8.4% of total cost)\n- **Recommendation**: Review usage of these services. If not fully utilized, consider reducing the scale or shutting down unnecessary instances.\n- **Estimated Savings**: Depends on scale reduction, potentially up to $386.38\n- **Implementation**: Review usage reports from the respective service dashboards, and adjust as necessary.\n- **Risk Level**: Medium. This could impact operational capacity if not done carefully.\n\nPlease note that actual savings will vary based on usage and the specific changes implemented. Always test changes in a non-production environment first to assess impact.',695.58,0.80,2085,4637.22,37,0,'completed',26.85,'2025-07-28 21:52:44'),(12,7,1,1,'2025-06-30','2025-07-30','Based on the provided data, here are several recommendations to help Bevstack reduce AWS costs:\n\n1. **Reserved Instances**\n   - **Resource**: Amazon Elastic Compute Cloud - Compute\n   - **Current Cost**: $80.27 monthly\n   - **Recommendation**: Purchase Reserved Instances for stable EC2 workloads\n   - **Estimated Savings**: Up to 75% compared to On-Demand pricing\n   - **Implementation**: Evaluate your EC2 usage patterns to determine which instances can be reserved. Purchase Reserved Instances in the AWS Management Console.\n   - **Risk Level**: Low. This does not impact operations as long as usage is consistent.\n\n2. **Storage Optimization**\n   - **Resource**: Amazon EC2 Container Registry (ECR)\n   - **Current Cost**: $8.16 monthly\n   - **Recommendation**: Delete unused images and consider lifecycle policies to automate this process\n   - **Estimated Savings**: Depends on the amount of unused data, but potentially all $8.16\n   - **Implementation**: Use the AWS Management Console to delete unused images and set lifecycle policies.\n   - **Risk Level**: Low. Make sure not to delete images that may be needed later.\n\n3. **Unused Resources**\n   - **Resource**: AWS Config\n   - **Current Cost**: $1.76 monthly\n   - **Recommendation**: Evaluate if AWS Config is necessary and consider terminating if not used\n   - **Estimated Savings**: $1.76 monthly if terminated\n   - **Implementation**: Use the AWS Management Console to terminate AWS Config if it is not being used.\n   - **Risk Level**: Medium. Ensure that AWS Config is not being used before terminating.\n\n4. **Network Costs**\n   - **Resource**: Amazon Virtual Private Cloud\n   - **Current Cost**: $39.61 monthly\n   - **Recommendation**: Evaluate data transfer patterns for potential cost reduction\n   - **Estimated Savings**: Depends on usage patterns\n   - **Implementation**: Analyze your VPC Flow Logs to identify expensive data transfer patterns. Consider redesigning your network architecture if possible.\n   - **Risk Level**: High. Changes to network architecture could impact operations.\n\nIt’s important to note that these are just estimates. Actual savings could be higher or lower depending on specific usage patterns. Also, always test changes in a non-production environment before implementing them in production.',46.20,0.80,1985,308.00,19,0,'completed',29.68,'2025-07-30 16:21:38'),(13,7,2,1,'2025-06-30','2025-07-30','Based on the provided AWS cost data, here are specific recommendations for cost optimization:\n\n1. **EC2 & EC2-Other Optimization**\n- **Resource**: EC2 Instances (52.4% of total costs, ~$161.20/month)\n- **Recommendation**: Convert consistent workloads to Reserved Instances (RI)\n- **Estimated Savings**: 30-40% on EC2 costs ($48-64/month)\n- **Implementation**: \n  * Purchase 1-year Standard RIs for instances running consistently\n  * Consider Savings Plans as a more flexible alternative\n- **Risk Level**: Low\n- **Priority**: High\n\n2. **VPC & Network Optimization**\n- **Resource**: Amazon VPC ($39.61/month)\n- **Recommendation**: Review and optimize NAT Gateway usage\n- **Implementation**:\n  * Consolidate NAT Gateways where possible\n  * Consider using VPC Endpoints for AWS services\n- **Estimated Savings**: 20-30% of VPC costs ($7.92-11.88/month)\n- **Risk Level**: Medium\n\n3. **Load Balancer Optimization**\n- **Resource**: Elastic Load Balancing ($32.43/month)\n- **Recommendation**: Review and consolidate load balancers\n- **Implementation**:\n  * Switch from Application Load Balancer to Network Load Balancer for stable workloads\n  * Remove unused load balancers\n- **Estimated Savings**: 15-25% of ELB costs ($4.86-8.10/month)\n- **Risk Level**: Medium\n\n4. **RDS Optimization**\n- **Resource**: RDS ($22.66/month)\n- **Recommendation**: Purchase RDS Reserved Instances for consistent usage\n- **Implementation**: \n  * Convert to RDS Reserved Instances\n  * Review and optimize instance sizes\n- **Estimated Savings**: 20-30% of RDS costs ($4.53-6.80/month)\n- **Risk Level**: Low\n\n5. **CloudWatch Optimization**\n- **Resource**: CloudWatch ($19.22/month)\n- **Recommendation**: Optimize logging and metrics collection\n- **Implementation**:\n  * Review and adjust log retention periods\n  * Reduce metric resolution where appropriate\n  * Remove unnecessary custom metrics\n- **Estimated Savings**: 15-25% of CloudWatch costs ($2.88-4.80/month)\n- **Risk Level**: Low\n\n6. **ElastiCache Optimization**\n- **Resource**: ElastiCache ($11.52/month)\n- **Recommendation**: Review cache instance sizing\n- **Implementation**:\n  * Analyze cache hit rates and memory usage\n  * Consider downsizing if utilization is low\n- **Estimated Savings**: 20-30% of ElastiCache costs ($2.30-3.46/month)\n- **Risk Level**: Medium\n\nAdditional Observations:\n1. Daily costs are very consistent (~$10.20-10.68/day), suggesting steady workloads that are good candidates for Reserved Instances\n2. No rightsizing opportunities were identified in the data, but a detailed instance-level analysis is recommended\n3. ECR costs ($8.16/month) could be reduced by implementing image lifecycle policies\n\nTotal Potential Monthly Savings: $70.49-99.04 (23-32% of total costs)\n\nPriority Actions:\n1. Implement EC2 Reserved Instances/Savings Plans (highest potential savings)\n2. Optimize VPC/networking costs\n3. Review and optimize load balancer configuration\n4. Purchase RDS Reserved Instances\n5. Implement CloudWatch optimization\n6. Review ElastiCache sizing\n\nImplementation Plan:\n1. Week 1: Analyze EC2 usage patterns and purchase RIs/Savings Plans\n2. Week 2: Review and optimize networking configuration\n3. Week 3: Optimize load balancers and RDS\n4. Week 4: Implement monitoring and logging optimizations\n\nRegular monitoring and quarterly reviews are recommended to maintain cost optimization efforts.',46.20,0.80,2619,308.00,19,0,'completed',16.97,'2025-07-30 16:26:01'),(14,8,2,1,'2025-07-02','2025-08-01','Based on the provided AWS cost data, here are specific, actionable recommendations for cost optimization:\n\n1. **RDS Optimization (Highest Priority)**\n- **Resource**: Amazon RDS ($1,104/month, 41% of costs)\n- **Current Cost**: $1,104/month\n- **Recommendations**: \n  a. Convert to Reserved Instances for 1-year term\n  b. Evaluate instance size based on CloudWatch metrics\n- **Estimated Savings**: $330-440/month (30-40% with RIs)\n- **Implementation**: \n  - Review CloudWatch metrics for CPU, memory, and IOPS utilization\n  - Purchase RIs for instances with consistent usage\n  - Consider Aurora Serverless for dev/test environments\n- **Risk Level**: Low\n\n2. **EC2 Instance Optimization**\n- **Resource**: EC2 Compute ($533/month, 19.8% of costs)\n- **Current Cost**: $533/month\n- **Recommendations**:\n  a. Purchase Reserved Instances for steady-state workloads\n  b. Implement auto-scaling based on utilization\n- **Estimated Savings**: $160-215/month (30-40%)\n- **Implementation**:\n  - Review CloudWatch metrics for utilization patterns\n  - Tag instances for environment (prod/dev/test)\n  - Implement automated start/stop schedules for non-production\n- **Risk Level**: Low-Medium\n\n3. **ElastiCache Optimization**\n- **Resource**: Amazon ElastiCache ($204/month, 7.6% of costs)\n- **Current Cost**: $204/month\n- **Recommendations**: \n  - Right-size cache instances based on memory usage\n  - Convert to Reserved Instances\n- **Estimated Savings**: $50-70/month (25-35%)\n- **Implementation**:\n  - Review CloudWatch metrics for memory usage\n  - Purchase RIs for consistently used nodes\n- **Risk Level**: Low\n\n4. **Load Balancer Optimization**\n- **Resource**: Elastic Load Balancing ($121/month, 4.5% of costs)\n- **Current Cost**: $121/month\n- **Recommendations**:\n  - Remove unused load balancers\n  - Switch from Application to Network Load Balancer where appropriate\n- **Estimated Savings**: $20-30/month (15-25%)\n- **Implementation**:\n  - Audit load balancers for actual usage\n  - Remove or consolidate underutilized LBs\n- **Risk Level**: Medium\n\n5. **Storage Optimization**\n- **Resource**: S3 ($7.84/month)\n- **Current Cost**: $7.84/month\n- **Recommendations**:\n  - Implement lifecycle policies\n  - Move infrequently accessed data to S3-IA\n- **Estimated Savings**: $2-3/month (25-35%)\n- **Implementation**:\n  - Review object access patterns\n  - Create lifecycle rules for objects >30 days old\n- **Risk Level**: Low\n\nAdditional Observations:\n1. Daily costs show relatively consistent usage ($82-96/day), suggesting good candidates for Reserved Instances\n2. No rightsizing opportunities identified in the data, but recommend detailed resource utilization analysis\n3. VPC costs ($86/month) suggest potential NAT Gateway optimization opportunities\n\nTotal Potential Monthly Savings: $562-758 (20-28% of total costs)\n\nPriority Implementation Plan:\n1. Purchase RDS Reserved Instances (highest impact, lowest risk)\n2. Implement non-production resource scheduling\n3. Purchase EC2 Reserved Instances\n4. Optimize ElastiCache\n5. Review and optimize load balancers\n6. Implement S3 lifecycle policies\n\nMonitoring Recommendations:\n1. Set up AWS Cost Explorer reports for service-specific tracking\n2. Create CloudWatch alarms for unusual spending patterns\n3. Implement AWS Budgets for major service categories\n4. Regular review of Reserved Instance utilization\n5. Monthly cost optimization reviews\n\nWould you like me to elaborate on any of these recommendations or provide more specific implementation details for any area?',404.41,0.80,2635,2696.09,17,0,'completed',16.60,'2025-08-01 21:17:39'),(15,8,2,1,'2025-07-09','2025-08-08','Based on the provided AWS cost data, here are specific, actionable recommendations for cost optimization:\n\n1. **RDS Optimization (Highest Priority)**\n- **Resource**: Amazon RDS ($1,176/month, 41% of costs)\n- **Current Cost**: $1,176/month\n- **Recommendation**: \n  1. Convert eligible DB instances to Aurora Serverless v2\n  2. Implement automated start/stop schedules for non-production databases\n  3. Review and downsize over-provisioned instances based on CloudWatch metrics\n- **Estimated Savings**: $235-353/month (20-30% reduction)\n- **Implementation**: \n  - Use AWS Systems Manager to implement start/stop schedules\n  - Use Performance Insights to analyze actual database utilization\n  - Script automated snapshot before downsizing\n- **Risk Level**: Medium\n\n2. **EC2 Instance Optimization**\n- **Resource**: EC2 Compute ($541.83/month)\n- **Current Cost**: $541.83/month\n- **Recommendation**: \n  1. Purchase Reserved Instances for steady-state workloads\n  2. Implement auto-scaling based on actual usage patterns\n- **Estimated Savings**: $162-216/month (30-40% reduction)\n- **Implementation**:\n  - Review CloudWatch metrics for CPU/memory utilization\n  - Purchase 1-year Reserved Instances for instances with >40% utilization\n- **Risk Level**: Low\n\n3. **ElastiCache Optimization**\n- **Resource**: Amazon ElastiCache ($206.66/month)\n- **Current Cost**: $206.66/month\n- **Recommendation**: \n  1. Downsize cache clusters based on CloudWatch metrics\n  2. Consider switching to Graviton2 instances\n- **Estimated Savings**: $41-62/month (20-30% reduction)\n- **Implementation**:\n  - Monitor cache hit rates and memory usage\n  - Test workload compatibility with Graviton2\n- **Risk Level**: Low\n\n4. **Load Balancer Optimization**\n- **Resource**: Elastic Load Balancing ($122.26/month)\n- **Current Cost**: $122.26/month\n- **Recommendation**: \n  1. Remove unused load balancers\n  2. Switch from Application Load Balancer to Network Load Balancer where appropriate\n- **Estimated Savings**: $24-37/month (20-30% reduction)\n- **Implementation**:\n  - Review CloudWatch metrics for unused load balancers\n  - Audit load balancer configurations\n- **Risk Level**: Low\n\n5. **Storage Optimization**\n- **Resource**: S3 ($7.73/month)\n- **Current Cost**: $7.73/month\n- **Recommendation**: \n  1. Implement lifecycle policies to move infrequently accessed data to cheaper storage tiers\n  2. Delete unnecessary snapshots and unused AMIs\n- **Estimated Savings**: $1.5-2.3/month (20-30% reduction)\n- **Implementation**:\n  - Create S3 lifecycle policies\n  - Use AWS Config to identify unused resources\n- **Risk Level**: Low\n\nAdditional Observations:\n1. Notice significant cost spike on 2025-08-01 ($199.98 vs. average ~$90/day)\n2. EC2-Other costs are high ($546.09) - suggest detailed audit of EC2-related services\n3. VPC costs ($88.90) indicate potential optimization of NAT Gateway usage\n\nTotal Potential Monthly Savings: $464-670 (16-23% of total costs)\n\nPriority Implementation Plan:\n1. Start with RDS optimization for highest impact\n2. Implement EC2 Reserved Instances for steady-state workloads\n3. Review and optimize ElastiCache\n4. Audit and optimize load balancers\n5. Implement storage lifecycle policies\n\nMonitoring Recommendations:\n1. Set up AWS Cost Explorer reports for daily monitoring\n2. Create CloudWatch alarms for unusual spending patterns\n3. Implement AWS Budgets with alerts\n4. Regular review of AWS Cost and Usage Reports\n\nThese recommendations should be implemented gradually with proper testing in non-production environments first. Regular monitoring and adjustment of the optimization strategy will ensure maximum cost savings while maintaining system performance and reliability.',429.91,0.80,2668,2866.09,20,0,'completed',20.74,'2025-08-08 18:33:14');
/*!40000 ALTER TABLE `ai_reports` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `audit_logs`
--

DROP TABLE IF EXISTS `audit_logs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `audit_logs` (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_id` int DEFAULT NULL,
  `user_email` varchar(255) DEFAULT NULL,
  `action` varchar(50) NOT NULL,
  `resource_type` varchar(50) NOT NULL,
  `resource_id` varchar(50) DEFAULT NULL,
  `details` text,
  `ip_address` varchar(45) DEFAULT NULL,
  `user_agent` text,
  `success` tinyint(1) DEFAULT NULL,
  `error_message` text,
  `created_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `ix_audit_logs_id` (`id`),
  CONSTRAINT `audit_logs_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `audit_logs`
--

LOCK TABLES `audit_logs` WRITE;
/*!40000 ALTER TABLE `audit_logs` DISABLE KEYS */;
INSERT INTO `audit_logs` VALUES (1,1,'leonardo.bolsoni@koombea.com','CREATE','AI_AGENT',NULL,'{\"name\": \"Leo Anthropic\", \"model\": \"claude-3-5-sonnet-20241022\", \"provider\": \"anthropic\"}','172.66.0.243',NULL,0,'AI configuration validation failed: Unexpected error: \'Anthropic\' object has no attribute \'messages\'','2025-07-13 21:58:22'),(2,1,'leonardo.bolsoni@koombea.com','CREATE','AI_AGENT',NULL,'{\"name\": \"Leo Anthropic\", \"model\": \"claude-3-5-sonnet-20241022\", \"provider\": \"anthropic\"}','172.66.0.243',NULL,0,'AI configuration validation failed: Anthropic API Error: \'Anthropic\' object has no attribute \'messages\'','2025-07-13 22:03:34'),(3,1,'leonardo.bolsoni@koombea.com','CREATE','AI_AGENT',NULL,'{\"name\": \"Leo Anthropic\", \"model\": \"claude-3-5-sonnet-20241022\", \"provider\": \"anthropic\"}','172.66.0.243',NULL,0,'AI configuration validation failed: Anthropic API Error: \'Anthropic\' object has no attribute \'messages\'','2025-07-13 22:04:32'),(4,1,'leonardo.bolsoni@koombea.com','CREATE','AI_AGENT',NULL,'{\"name\": \"Leo Anthropic\", \"model\": \"claude-3-5-sonnet-20241022\", \"provider\": \"anthropic\"}','172.66.0.243',NULL,0,'AI configuration validation failed: Anthropic API Error: \'Anthropic\' object has no attribute \'messages\'','2025-07-13 22:04:35'),(5,1,'leonardo.bolsoni@koombea.com','CREATE','AI_AGENT',NULL,'{\"name\": \"Leo Anthropic\", \"model\": \"claude-3-5-sonnet-20241022\", \"provider\": \"anthropic\"}','172.66.0.243',NULL,0,'AI configuration validation failed: Anthropic API Error: \'Anthropic\' object has no attribute \'messages\'','2025-07-13 22:04:36'),(6,1,'leonardo.bolsoni@koombea.com','CREATE','AI_AGENT',NULL,'{\"name\": \"Leo Anthropic\", \"model\": \"claude-3-5-sonnet-20241022\", \"provider\": \"anthropic\"}','172.66.0.243',NULL,0,'AI configuration validation failed: Anthropic API Error: \'Anthropic\' object has no attribute \'messages\'','2025-07-13 22:04:36'),(7,1,'leonardo.bolsoni@koombea.com','CREATE','AI_AGENT',NULL,'{\"name\": \"Leo Anthropic\", \"model\": \"claude-3-5-sonnet-20241022\", \"provider\": \"anthropic\"}','172.66.0.243',NULL,0,'AI configuration validation failed: Bad request: Error code: 400 - {\'type\': \'error\', \'error\': {\'type\': \'invalid_request_error\', \'message\': \'Your credit balance is too low to access the Anthropic API. Please go to Plans & Billing to upgrade or purchase credits.\'}}','2025-07-13 22:12:13'),(8,1,'leonardo.bolsoni@koombea.com','CREATE','AI_AGENT','2','{\"name\": \"Leo Anthropic\", \"provider\": \"anthropic\", \"model\": \"claude-3-5-sonnet-20241022\", \"temperature\": 0.7, \"max_tokens\": 1000}','172.66.0.243',NULL,1,NULL,'2025-07-13 22:15:35');
/*!40000 ALTER TABLE `audit_logs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `aws_accounts`
--

DROP TABLE IF EXISTS `aws_accounts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `aws_accounts` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `description` text,
  `aws_account_id` varchar(12) NOT NULL,
  `access_key_id` varchar(20) NOT NULL,
  `secret_access_key_encrypted` text NOT NULL,
  `default_region` varchar(20) NOT NULL DEFAULT 'us-east-1',
  `is_active` tinyint(1) DEFAULT '1',
  `created_by` int NOT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `aws_account_id` (`aws_account_id`),
  KEY `idx_name` (`name`),
  KEY `idx_aws_account_id` (`aws_account_id`),
  KEY `idx_is_active` (`is_active`),
  KEY `idx_created_by` (`created_by`),
  KEY `idx_default_region` (`default_region`),
  CONSTRAINT `aws_accounts_ibfk_1` FOREIGN KEY (`created_by`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `aws_accounts`
--

LOCK TABLES `aws_accounts` WRITE;
/*!40000 ALTER TABLE `aws_accounts` DISABLE KEYS */;
INSERT INTO `aws_accounts` VALUES (3,'koombea-development','Koombea Development Account','759514674373','AKIA3BVU2GTCVBY3AVPL','gAAAAABocX285G10PRmM1K3VZ7b5z4iCqaCefXnbkYQy0s-q5zo6n_p3u6sP3RIt6EUbUBBXjmgbmDCBj0Ct7cg-Y1473npNzIaYMIo3e-OgtOgrxmNMzgUX8Yholab76ssqSap8gkh2','us-east-1',1,1,'2025-07-11 21:10:20','2025-07-11 21:10:20'),(4,'Koombea Master','Koombea Master Account','430127992102','AKIAWIJNAJUTFI2622WO','gAAAAABocX412qESyDO9DAKDm75eKh1etALhvGVbg3zm78ERrLIf2yysf_Vo8KzWrAXRCtadz0Y-xqnDLFBYatVVVMJyMkxq_JxrrMR-xzu8tUo4z8q8zNbaxvI9_ald6Tys_GW7rApe','us-east-1',1,1,'2025-07-11 21:12:21','2025-07-11 21:12:21'),(5,'ThirdHome','ThirdHome Account','004112315214','AKIAQB5I46NHLLMHICYU','gAAAAABocYAEVROyGBJF4NLX42CXx3gC0tSTvuAuf7n16yavusx8E0zEGahdIHH7i77xulLXcF0LzMZ-_EqVG6slxeNRmVyQGtTnuZVHqp210Ebo_IXFsmsi6I5FTbpDt7V2sPbMfynd','us-east-1',1,1,'2025-07-11 21:20:04','2025-07-11 21:20:04'),(6,'DevSecOps Staging','DevSecOps Staging Account','425767907853','AKIAWGIN6WIGQ3CVBUH7','gAAAAABocYTewbgtd0vGqttZoJqSldbZppTJglwevRuKhwzSV-764v8z4R4pLV_MhaVnwaBn6t34PG_JfJhpFytOqBzq1P5bouKgONYhwI8vFMdVXwhhWmArJyIicpy-L0OhbIQ-M7hm','us-east-1',1,1,'2025-07-11 21:40:46','2025-07-13 21:24:45'),(7,'Bevstack','Bevstack Staging Account','590184140006','AKIAYS2NXJTTNMMKD4WL','gAAAAABog7mJ4j7Q4aPA0IGQCe2eFGwnGcz2B0YZc-PdGFE0xdiH1qwaVksfXD6zukoIR2KL9poiZdi_8wUk44Vp5tUlpImcY444emkhkgTu7pigNbwTxTEu5INP8GfxEnx-ARW4Ws6n','us-east-1',1,1,'2025-07-25 17:06:17','2025-07-25 17:06:17'),(8,'MySide','','598953468804','AKIAYW5DIUOCMOAUSJ6Q','gAAAAABojS7NK-YCklArhGQ9eft8yFISq_6RGWhIuE1wFt3gCcFaLFlHlyoGmoAuVo-ujySnKGSm6DjCucJLdo4SFEv09iMCTm2ghYjkOWyYuwJIcuFcLSrfn9jTVUl3KxP8zvN5MFLu','us-east-1',1,1,'2025-08-01 21:17:01','2025-08-01 21:17:01');
/*!40000 ALTER TABLE `aws_accounts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `email` varchar(255) NOT NULL,
  `password_hash` varchar(255) NOT NULL,
  `is_active` tinyint(1) DEFAULT '1',
  `is_admin` tinyint(1) DEFAULT '0',
  `avatar_url` varchar(500) DEFAULT NULL,
  `timezone` varchar(50) DEFAULT 'UTC',
  `last_login` timestamp NULL DEFAULT NULL,
  `last_seen` timestamp NULL DEFAULT NULL,
  `created_by_admin` tinyint(1) DEFAULT '1',
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `email` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'Leonardo Bolsoni','leonardo.bolsoni@koombea.com','$2b$12$KAXJit1Kl.MIkIMNV68IpuFnsWi.OCIH83zU61ohtwE5xGPfvtYna',1,1,'','America/Sao_Paulo','2025-08-08 18:32:18','2025-08-08 18:32:18',0,'2025-07-11 20:07:15','2025-08-08 18:32:18'),(2,'jonathan','jonathan@koombea.com','$2b$12$ZUKc8rU042eDnWOlCQnt2O1Zhs2ExAJVac7YKLdIWQxN6igq7afmy',1,0,NULL,'UTC','2025-07-16 20:13:16','2025-07-16 20:13:16',1,'2025-07-16 20:13:07','2025-07-16 20:13:16');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-08-12 13:46:09
